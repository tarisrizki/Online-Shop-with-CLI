import java.util.ArrayList;
import java.util.List;

class Admin extends Akun {
    private List<Customer> daftarCustomer;

    public Admin(String username, String password) {
        super(username, password);
        daftarCustomer = new ArrayList<>();
    }

    public void tambahCustomer(Customer customer) {
        daftarCustomer.add(customer);
    }

    public List<Customer> getDaftarCustomer() {
        return daftarCustomer;
    }

    public void lihatTransaksi() {
        System.out.println("Daftar Transaksi:");
        for (Customer customer : daftarCustomer) {
            List<Transaksi> transaksiSelesai = customer.getTransaksiSelesai();
            if (!transaksiSelesai.isEmpty()) {
                System.out.println("Transaksi untuk Pelanggan " + customer.getUsername() + ":");
                for (Transaksi transaksi : transaksiSelesai) {
                    System.out.println("Transaksi ID: " + transaksi.getId());
                    System.out.println("Barang yang dibeli:");
                    for (Barang barang : transaksi.getDaftarBarang()) {
                        System.out.println("  - " + barang.getNama());
                    }
                    System.out.println("Metode Pembayaran: " + transaksi.getMetodePembayaran().getClass().getSimpleName());
                    System.out.println("---------------------------");
                }
            } else {
                System.out.println("Belum ada transaksi untuk Pelanggan " + customer.getUsername());
            }
        }
    }

    public void lihatDaftarBarang(ListBarang listBarang) {
        System.out.println("Daftar Barang Terbaru:");
        listBarang.displayBarang();
    }
}

import java.util.ArrayList;
import java.util.Scanner;

public class AdminDriver extends Driver {
    public Admin akun;
    public ListBarang listBarang;
    public ArrayList<Transaksi> listTransaksi;

    public AdminDriver(Admin akun, ListBarang listBarang, ArrayList<Transaksi> listTransaksi) {
        this.akun = akun;
        this.listBarang = listBarang;
        this.listTransaksi = listTransaksi;
    }

    // Fungsi atau menu admin
    public void menuAdmin(Admin admin, ListBarang listBarang, Scanner scanner) {
        int choice;
        do {
            System.out.println("Menu Admin:");
            System.out.println("1. Tambah Barang");
            System.out.println("2. Hapus Barang");
            System.out.println("3. Edit Barang");
            System.out.println("4. Lihat Transaksi");
            System.out.println("5. Keluar");

            System.out.print("Pilih: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // Membuang karakter newline setelah nextInt

            switch (choice) {
                case 1:
                    tambahBarang(listBarang, scanner);
                    break;
                case 2:
                    hapusBarang(listBarang, scanner);
                    break;
                case 3:
                    editBarang(listBarang, scanner);
                    break;
                case 4:
                    lihatTransaksi();
                    break;
                case 5:
                    System.out.println("Keluar dari Menu Admin");
                    break;
                default:
                    System.out.println("Pilihan tidak valid. Coba lagi.");
            }
        } while (choice != 5);
    }

    private void tambahBarang(ListBarang listBarang, Scanner scanner) {
        System.out.print("Masukkan ID Barang: ");
        String id = scanner.nextLine();
        System.out.print("Masukkan Nama Barang: ");
        String nama = scanner.nextLine();
        System.out.print("Masukkan Harga Barang: ");
        double harga = scanner.nextDouble();

        Barang newBarang = new Barang(id, nama, harga);
        listBarang.addBarang(newBarang);
        System.out.println("Barang berhasil ditambahkan!");
    }

    private void hapusBarang(ListBarang listBarang, Scanner scanner) {
        System.out.print("Masukkan ID Barang yang akan dihapus: ");
        String id = scanner.nextLine();

        // Hapus barang dengan ID yang sesuai
        listBarang.hapusBarang(id);
        System.out.println("Barang berhasil dihapus!");
    }

    private void editBarang(ListBarang listBarang, Scanner scanner) {
        System.out.print("Masukkan ID Barang yang akan diubah: ");
        String id = scanner.nextLine();

        // Cari barang dengan ID yang sesuai
        Barang barang = listBarang.cariBarang(id);

        if (barang != null) {
            System.out.print("Masukkan Nama Barang baru: ");
            String namaBaru = scanner.nextLine();
            System.out.print("Masukkan Harga Barang baru: ");
            double hargaBaru = scanner.nextDouble();

            // Update informasi barang
            barang.setNama(namaBaru);
            barang.setHarga(hargaBaru);

            System.out.println("Barang berhasil diubah!");
        } else {
            System.out.println("Barang dengan ID tersebut tidak ditemukan.");
        }
    }

    private void lihatTransaksi() {
        // Tampilkan list transaksi yang ada
        for (Transaksi transaksi : listTransaksi) {
            System.out.println("Transaksi ID: " + transaksi.getId());
            // Tampilkan informasi tambahan sesuai kebutuhan
        }
    }
}

abstract class Akun {
    private String username;
    private String password;

    public Akun(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public boolean verifyLogin(String inputUsername, String inputPassword) {
        return username.equals(inputUsername) && password.equals(inputPassword);
    }

    public String getUsername() {
        return username;
    }
}

class Bank extends Pembayaran {
    private String bank;

    public Bank(String bank) {
        this.bank = bank;
    }

    @Override
    public void prosesPembayaran(double total) {
        System.out.println("Pembayaran sebesar Rp" + total + " dengan transfer bank berhasil.");
        System.out.println("Bank: " + bank);
    }
}

class Barang {
    private String id;
    private String nama;
    private double harga;

    public Barang(String id, String nama, double harga) {
        this.id = id;
        this.nama = nama;
        this.harga = harga;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getNama() {
        return nama;
    }

    public void setNama(String nama) {
        this.nama = nama;
    }

    public double getHarga() {
        return harga;
    }

    public void setHarga(double harga) {
        this.harga = harga;
    }

    @Override
    public String toString() {
        return "[" + id + "] " + nama + " - Rp" + harga;
    }
}

class COD extends Pembayaran {
    @Override
    public void prosesPembayaran(double total) {
        System.out.println("Pembayaran sebesar Rp" + total + " dengan metode COD berhasil.");
        System.out.println("Silakan bayar tunai saat barang diterima.");
    }
}

import java.util.ArrayList;
import java.util.List;

class Customer extends Akun {
    private Keranjang keranjang;
    private List<Transaksi> transaksiSelesai;

    public Customer(String username, String password) {
        super(username, password);
        keranjang = new Keranjang();
        transaksiSelesai = new ArrayList<>();
    }

    public List<Transaksi> getTransaksiSelesai() {
        return transaksiSelesai;
    }

    public void lihatListBarang(ListBarang listBarang) {
        System.out.println("List Barang yang Dijual:");
        listBarang.displayBarang();
    }

    // Fungsi untuk melihat daftar barang terbaru setelah admin menambahkan barang
    public void lihatDaftarBarangTerbaru(Admin admin, ListBarang listBarang) {
        admin.lihatDaftarBarang(listBarang);
    }

    public void tambahKeKeranjang(Barang barang) {
        keranjang.tambahBarang(barang);
        System.out.println(barang.getNama() + " telah ditambahkan ke keranjang.");
    }

    public void checkout(Pembayaran metodePembayaran) {
        List<Barang> barangDibeli = keranjang.getListBarang();
        if (barangDibeli.isEmpty()) {
            System.out.println("Keranjang kosong. Tidak dapat checkout.");
        } else {
            Transaksi transaksi = new Transaksi(new ArrayList<>(barangDibeli), metodePembayaran);
            transaksiSelesai.add(transaksi);
            keranjang.clearKeranjang();
            System.out.println("Checkout berhasil. Terima kasih atas pembelian Anda!");
            System.out.println("Metode Pembayaran: " + metodePembayaran.getClass().getSimpleName());
        }
    }

    public void lihatHistoryBelanja() {
        System.out.println("History Belanja:");
        for (Transaksi transaksi : transaksiSelesai) {
            System.out.println("Transaksi ID: " + transaksi.getId());
            System.out.println("Barang yang dibeli:");
            for (Barang barang : transaksi.getDaftarBarang()) {
                System.out.println("  - " + barang.getNama());
            }
            System.out.println("---------------------------");
        }
    }
}

import java.util.Scanner;

public class CustomerDriver extends Driver {
    public Customer akun;
    public Transaksi transaksi;
    public ListBarang barang;

    public void menuPelanggan(Customer pelanggan, ListBarang listBarang, Scanner scanner) {
        int choice;
        do {
            System.out.println("Menu Pelanggan:");
            System.out.println("1. Lihat List Barang");
            System.out.println("2. Tambah ke Keranjang");
            System.out.println("3. Checkout");
            System.out.println("4. Lihat History Belanja");
            System.out.println("5. Keluar");

            System.out.print("Pilih: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // Membuang karakter newline setelah nextInt
            System.out.println();

            switch (choice) {
                case 1:
                    pelanggan.lihatListBarang(listBarang);
                    break;
                case 2:
                    System.out.print("Masukkan ID Barang yang ingin ditambahkan ke keranjang: ");
                    String idBarang = scanner.nextLine();
                    Barang barangDitambahkan = listBarang.cariBarang(idBarang);
                    if (barangDitambahkan != null) {
                        pelanggan.tambahKeKeranjang(barangDitambahkan);
                    } else {
                        System.out.println("Barang tidak ditemukan.");
                    }
                    break;
                case 3:
                    // Checkout dengan memilih metode pembayaran
                    pilihMetodePembayaran(pelanggan, scanner);
                    break;
                case 4:
                    pelanggan.lihatHistoryBelanja();
                    break;
                case 5:
                    System.out.println("Keluar dari Menu Pelanggan");
                    break;
                default:
                    System.out.println("Pilihan tidak valid. Coba lagi.");
            }
        } while (choice != 5);
    }

    public void pilihMetodePembayaran(Customer pelanggan, Scanner scanner) {
        System.out.println("Pilih Metode Pembayaran:");
        System.out.println("1. QRIS Payment");
        System.out.println("2. Bank Transfer");
        System.out.println("3. COD (Cash On Delivery)");
    
        System.out.print("Pilih Metode Pembayaran: ");
        int metodePembayaranChoice = scanner.nextInt();
        scanner.nextLine(); // Membuang karakter newline setelah nextInt
    
        Pembayaran metodePembayaran = null;
    
        switch (metodePembayaranChoice) {
            case 1:
                System.out.print("Masukkan QR Code: ");
                String qrCode = scanner.nextLine();
                metodePembayaran = new QRIS(qrCode);
                break;
            case 2:
                System.out.print("Masukkan Nama Bank: ");
                String bank = scanner.nextLine();
                metodePembayaran = new Bank(bank);
                break;
            case 3:
                metodePembayaran = new COD();
                break;
            default:
                System.out.println("Pilihan Metode Pembayaran tidak valid.");
                break;
        }
    
        if (metodePembayaran != null) {
            pelanggan.checkout(metodePembayaran);
        }
    }
}

public class Driver {
    // Kosongkan untuk sementara
}

public class Invoice {
    private static int counter = 1; // Untuk meng-generate ID invoice secara otomatis
    private int id;
    private Transaksi transaksi;
    private Pembayaran pembayaran;

    public Invoice(Transaksi transaksi, Pembayaran pembayaran) {
        this.id = counter++;
        this.transaksi = transaksi;
        this.pembayaran = pembayaran;
    }

    // Getter sesuai kebutuhan
    public int getId() {
        return id;
    }
}

import java.util.ArrayList;
import java.util.List;

class Keranjang {
    private List<Barang> daftarBarang = new ArrayList<>();

    public void tambahBarang(Barang barang) {
        daftarBarang.add(barang);
    }

    public void clearKeranjang() {
        daftarBarang.clear();
    }

    public List<Barang> getListBarang() {
        return daftarBarang;
    }
}

import java.util.ArrayList;
import java.util.List;

class ListBarang {
    private List<Barang> listBarang = new ArrayList<>();

    public void addBarang(Barang barang) {
        listBarang.add(barang);
    }

    public void hapusBarang(String id) {
        Barang barang = cariBarang(id);
        if (barang != null) {
            listBarang.remove(barang);
        }
    }

    public void displayBarang() {
        System.out.println("Daftar Barang yang Tersedia:");
        for (Barang barang : listBarang) {
            System.out.println(barang);
        }
    }

    public Barang cariBarang(String kode) {
        for (Barang barang : listBarang) {
            if (barang.getId().equals(kode)) {
                return barang;
            }
        }
        return null;
    }
}

import java.util.Scanner;

public class Main {
    static Scanner scanner = new Scanner(System.in);
    public static void main(String[] args) {
        boolean program = true;
        Admin admin = new Admin("admin", "admin123");

        ListBarang listBarang = new ListBarang();

        // Menambahkan beberapa barang contoh
        Barang barang1 = new Barang("001", "Laptop", 8000000);
        Barang barang2 = new Barang("002", "Smartphone", 5000000);
        listBarang.addBarang(barang1);
        listBarang.addBarang(barang2);

        // Membuat akun pelanggan
        Customer customer = new Customer("user1", "user123");

        // Menambahkan pelanggan ke daftar pelanggan admin
        admin.tambahCustomer(customer);

        while (program) {
            
            // Menambahkan pelanggan ke daftar pelanggan admin
            System.out.println("===============================");
            System.out.println("Selamat datang di Online Shop");
            System.out.println("Apakah anda sudah memiliki akun?");
            System.out.println("Jika sudah tekan 1 untuk login dan jika belum tekan 2 untuk sign up");
            int pilihan = scanner.nextInt();
            scanner.nextLine();
            System.out.println("===============================\n");
            switch (pilihan) {
                case 1:
                login(admin, listBarang);
                break;
                case 2:
                signUp(admin, scanner, null);
                break;
                case 3:
                program = false;
            default:
                break;
            }
        }
    }
        
        // Menu Login
        public static void login(Admin admin, ListBarang listBarang){
        System.out.print("Username: ");
        String username = scanner.nextLine();
        System.out.print("Password: ");
        String password = scanner.nextLine();

        if (admin.verifyLogin(username, password)) {
            // Admin login
            System.out.println("Admin login berhasil.");
            AdminDriver adminDriver = new AdminDriver(admin, listBarang, null);
            adminDriver.menuAdmin(admin, listBarang, scanner);
        } else {
            // Pelanggan login
            boolean pelangganLoginBerhasil = false;
            for (Customer c : admin.getDaftarCustomer()) {
                if (c.verifyLogin(username, password)) {
                    CustomerDriver customerDriver = new CustomerDriver();
                    customerDriver.menuPelanggan(c, listBarang, scanner);
                    pelangganLoginBerhasil = true;
                    break;
                }
            }
            if (!pelangganLoginBerhasil) {
                System.out.println("Login gagal. Coba lagi.");
            }
        }
    }

    //signup
    public static void signUp(Admin admin, Scanner scanner, Customer pelanggan) {
        System.out.println("Customer Signup:");
        System.out.print("Masukkan username anda: ");
        String usernamePelanggan = scanner.nextLine();
        System.out.print("Masukkan password anda: ");
        String passwordPelanggan = scanner.nextLine();

        pelanggan = new Customer(usernamePelanggan, passwordPelanggan);
        admin.tambahCustomer(pelanggan);

        System.out.println("Customer account berhasil dibuat.");
        login(admin, null);
    }
}
    
abstract class Pembayaran {
    public abstract void prosesPembayaran(double total);
}

class QRIS extends Pembayaran {
    private String qrCode;

    public QRIS(String qrCode) {
        this.qrCode = qrCode;
    }

    @Override
    public void prosesPembayaran(double total) {
        System.out.println("Pembayaran sebesar Rp" + total + " dengan QRIS berhasil.");
        System.out.println("QR Code: " + qrCode);
    }
}

import java.util.List;

class Transaksi {
    private static int counter = 1;
    private int id;
    private List<Barang> daftarBarang;
    private Pembayaran metodePembayaran;

    public Transaksi(List<Barang> daftarBarang, Pembayaran metodePembayaran) {
        this.id = counter++;
        this.daftarBarang = daftarBarang;
        this.metodePembayaran = metodePembayaran;
    }

    public int getId() {
        return id;
    }

    public List<Barang> getDaftarBarang() {
        return daftarBarang;
    }

    public Pembayaran getMetodePembayaran() {
        return metodePembayaran;
    }
}

class Barang {
    private String id;
    private String nama;
    private double harga;

    public Barang(String id, String nama, double harga) {
        this.id = id;
        this.nama = nama;
        this.harga = harga;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getNama() {
        return nama;
    }

    public void setNama(String nama) {
        this.nama = nama;
    }

    public double getHarga() {
        return harga;
    }

    public void setHarga(double harga) {
        this.harga = harga;
    }

    @Override
    public String toString() {
        return "[" + id + "] " + nama + " - Rp" + harga;
    }
}
